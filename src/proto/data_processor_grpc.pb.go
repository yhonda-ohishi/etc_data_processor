// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: src/proto/data_processor.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataProcessorService_ProcessCSVFile_FullMethodName  = "/etcdataprocessor.v1.DataProcessorService/ProcessCSVFile"
	DataProcessorService_ProcessCSVData_FullMethodName  = "/etcdataprocessor.v1.DataProcessorService/ProcessCSVData"
	DataProcessorService_ValidateCSVData_FullMethodName = "/etcdataprocessor.v1.DataProcessorService/ValidateCSVData"
	DataProcessorService_HealthCheck_FullMethodName     = "/etcdataprocessor.v1.DataProcessorService/HealthCheck"
)

// DataProcessorServiceClient is the client API for DataProcessorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataProcessorServiceClient interface {
	ProcessCSVFile(ctx context.Context, in *ProcessCSVFileRequest, opts ...grpc.CallOption) (*ProcessCSVFileResponse, error)
	ProcessCSVData(ctx context.Context, in *ProcessCSVDataRequest, opts ...grpc.CallOption) (*ProcessCSVDataResponse, error)
	ValidateCSVData(ctx context.Context, in *ValidateCSVDataRequest, opts ...grpc.CallOption) (*ValidateCSVDataResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type dataProcessorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataProcessorServiceClient(cc grpc.ClientConnInterface) DataProcessorServiceClient {
	return &dataProcessorServiceClient{cc}
}

func (c *dataProcessorServiceClient) ProcessCSVFile(ctx context.Context, in *ProcessCSVFileRequest, opts ...grpc.CallOption) (*ProcessCSVFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessCSVFileResponse)
	err := c.cc.Invoke(ctx, DataProcessorService_ProcessCSVFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataProcessorServiceClient) ProcessCSVData(ctx context.Context, in *ProcessCSVDataRequest, opts ...grpc.CallOption) (*ProcessCSVDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessCSVDataResponse)
	err := c.cc.Invoke(ctx, DataProcessorService_ProcessCSVData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataProcessorServiceClient) ValidateCSVData(ctx context.Context, in *ValidateCSVDataRequest, opts ...grpc.CallOption) (*ValidateCSVDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateCSVDataResponse)
	err := c.cc.Invoke(ctx, DataProcessorService_ValidateCSVData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataProcessorServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, DataProcessorService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataProcessorServiceServer is the server API for DataProcessorService service.
// All implementations must embed UnimplementedDataProcessorServiceServer
// for forward compatibility.
type DataProcessorServiceServer interface {
	ProcessCSVFile(context.Context, *ProcessCSVFileRequest) (*ProcessCSVFileResponse, error)
	ProcessCSVData(context.Context, *ProcessCSVDataRequest) (*ProcessCSVDataResponse, error)
	ValidateCSVData(context.Context, *ValidateCSVDataRequest) (*ValidateCSVDataResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedDataProcessorServiceServer()
}

// UnimplementedDataProcessorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataProcessorServiceServer struct{}

func (UnimplementedDataProcessorServiceServer) ProcessCSVFile(context.Context, *ProcessCSVFileRequest) (*ProcessCSVFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessCSVFile not implemented")
}
func (UnimplementedDataProcessorServiceServer) ProcessCSVData(context.Context, *ProcessCSVDataRequest) (*ProcessCSVDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessCSVData not implemented")
}
func (UnimplementedDataProcessorServiceServer) ValidateCSVData(context.Context, *ValidateCSVDataRequest) (*ValidateCSVDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateCSVData not implemented")
}
func (UnimplementedDataProcessorServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedDataProcessorServiceServer) mustEmbedUnimplementedDataProcessorServiceServer() {}
func (UnimplementedDataProcessorServiceServer) testEmbeddedByValue()                              {}

// UnsafeDataProcessorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataProcessorServiceServer will
// result in compilation errors.
type UnsafeDataProcessorServiceServer interface {
	mustEmbedUnimplementedDataProcessorServiceServer()
}

func RegisterDataProcessorServiceServer(s grpc.ServiceRegistrar, srv DataProcessorServiceServer) {
	// If the following call pancis, it indicates UnimplementedDataProcessorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataProcessorService_ServiceDesc, srv)
}

func _DataProcessorService_ProcessCSVFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessCSVFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProcessorServiceServer).ProcessCSVFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataProcessorService_ProcessCSVFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProcessorServiceServer).ProcessCSVFile(ctx, req.(*ProcessCSVFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataProcessorService_ProcessCSVData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessCSVDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProcessorServiceServer).ProcessCSVData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataProcessorService_ProcessCSVData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProcessorServiceServer).ProcessCSVData(ctx, req.(*ProcessCSVDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataProcessorService_ValidateCSVData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateCSVDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProcessorServiceServer).ValidateCSVData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataProcessorService_ValidateCSVData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProcessorServiceServer).ValidateCSVData(ctx, req.(*ValidateCSVDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataProcessorService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProcessorServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataProcessorService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProcessorServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataProcessorService_ServiceDesc is the grpc.ServiceDesc for DataProcessorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataProcessorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "etcdataprocessor.v1.DataProcessorService",
	HandlerType: (*DataProcessorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessCSVFile",
			Handler:    _DataProcessorService_ProcessCSVFile_Handler,
		},
		{
			MethodName: "ProcessCSVData",
			Handler:    _DataProcessorService_ProcessCSVData_Handler,
		},
		{
			MethodName: "ValidateCSVData",
			Handler:    _DataProcessorService_ValidateCSVData_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _DataProcessorService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/proto/data_processor.proto",
}
